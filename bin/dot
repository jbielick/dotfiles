#!/usr/bin/env bash
#
# dot
#
# `dot` handles installation, updates, things like that. Run it periodically
# to make sure you're on the latest and greatest.

set -euo pipefail

cd "$(dirname "$0")/.."

export ZSH=$HOME/.dotfiles
DOTFILES_ROOT=$(pwd -P)

function print_error {
    read line file <<<"$(caller)"
    echo "An error occurred in line $line of file $file:" >&2
    sed "${line}q;d" "$file" >&2
}
trap print_error ERR

# Set macOS defaults
$ZSH/macos/set-defaults.sh

HOMEBREW_BUNDLE_FILE="$DOTFILES_ROOT/Brewfile"

# Run Homebrew through the Brewfile
# info "brew bundle"
# brew bundle check || brew bundle || true

echo ''

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}


link_file () {
  local src=$1
  local dst=$2
  local current_src
  local overwrite
  local backup
  local skip=false
  local action
  local skip_all=false

  if [ -L "$dst" ]; then
    current_src="$(readlink "$dst")"
  else
    current_src=""
  fi

  if [ -f "$dst" ] || [ -d "$dst" ] || [ -L "$dst" ]; then
    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]; then
      if [ "$current_src" == "$src" ]; then
        skip=true;
      else
        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action
        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]; then
    if [ "$(dirname "$dst")" != "$HOME" ]; then
      mkdir -p "$(dirname "$dst")"
    fi
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

link_dotfiles () {
  info 'linking dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -name "*.symlink" -mindepth 1 -maxdepth 4 -not -path '*.git')
  do
    # remove working dir
    local_dir="${src#"$PWD"}"
    # remove preceding folder from path (root folder in this repo)
    subpath="${local_dir#/*/}"
    # remove .symlink ext
    dst="$HOME/${subpath%.*}"
    link_file "$src" "$dst"
  done
  cd "$DOTFILES_ROOT"
}

link_dirs () {
  info 'linking directories'

  local overwrite_all=false backup_all=false skip_all=false

  for dir in $(find -H "$DOTFILES_ROOT" -type d -maxdepth 3 -mindepth 2 -name '*.symlink' -not -path '*.git*')
  do
    prefix="$HOME/$(basename "${dir%.*}")"
    mkdir -p "$prefix"
    for src in $(find -H "$dir" -type f -name '*.symlink')
    do
      dst="$prefix/$(basename "${src%.*}")"
      link_file "$src" "$dst"
    done
  done
}

link_vim_colors () {
  info 'linking vim colors'

  local dest="$HOME/.vim"

  rm -rf "$dest/colors"
  ln -s "$DOTFILES_ROOT/vim/colors" "$dest"

  success "vim colors linked"
}

link_dotfiles
link_dirs
# link_vim_colors

info "installing..."

find . -name install.sh -exec /usr/bin/env bash {} \;

success "installation complete"
